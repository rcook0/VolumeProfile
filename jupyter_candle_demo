{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Candlestick Chart with VP Strategy Signals\n",
    "\n",
    "Loads `data.csv`, runs the Volume Profile breakout strategy (Backtrader), and overlays BUY/SELL markers on candlestick charts (mplfinance + Plotly)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install mplfinance plotly pandas backtrader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import mplfinance as mpf\n",
    "import plotly.graph_objects as go\n",
    "import backtrader as bt\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the CSV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data.csv\", parse_dates=[\"datetime\"])\n",
    "df.set_index(\"datetime\", inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Backtrader Strategy (with signal recording)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "signals = []\n",
    "\n",
    "class VPStrategy(bt.Strategy):\n",
    "    def next(self):\n",
    "        vah = max(self.data.high.get(size=24))\n",
    "        val = min(self.data.low.get(size=24))\n",
    "        vwap = (self.data.high[0] + self.data.low[0] + self.data.close[0]) / 3\n",
    "\n",
    "        if not self.position:\n",
    "            if self.data.close[0] > vah and self.data.close[0] > vwap:\n",
    "                self.buy()\n",
    "                signals.append((self.data.datetime.datetime(0), self.data.close[0], \"BUY\"))\n",
    "            elif self.data.close[0] < val and self.data.close[0] < vwap:\n",
    "                self.sell()\n",
    "                signals.append((self.data.datetime.datetime(0), self.data.close[0], \"SELL\"))\n",
    "\n",
    "# Run backtest\n",
    "data = bt.feeds.PandasData(dataname=df)\n",
    "cerebro = bt.Cerebro()\n",
    "cerebro.addstrategy(VPStrategy)\n",
    "cerebro.adddata(data)\n",
    "cerebro.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Static Candlestick (mplfinance) with Signals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_plot = df.tail(200)\n",
    "\n",
    "buy_signals = [(d,p) for d,p,s in signals if s==\"BUY\" and d in df_plot.index]\n",
    "sell_signals = [(d,p) for d,p,s in signals if s==\"SELL\" and d in df_plot.index]\n",
    "\n",
    "apds = []\n",
    "if buy_signals:\n",
    "    apds.append(mpf.make_addplot([p for d,p in buy_signals], type='scatter', markersize=100, marker='^', color='g', panel=0))\n",
    "if sell_signals:\n",
    "    apds.append(mpf.make_addplot([p for d,p in sell_signals], type='scatter', markersize=100, marker='v', color='r', panel=0))\n",
    "\n",
    "mpf.plot(df_plot, type=\"candle\", style=\"yahoo\", volume=True, mav=(20,50), addplot=apds)"
